# Copyright (c) 2023 Riverbank Computing Limited.
#
# This file is part of metasip.
#
# This file may be used under the terms of the GNU General Public License v3
# as published by the Free Software Foundation which can be found in the file
# LICENSE-GPL3.txt included in this package.
#
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


import os

from ..exceptions import UserException
from ..models.adapters import adapt

from .indent_file import IndentFile


def generate_sip_files(project, output_dir, ignored_modules, verbose):
    """ Generate the .sip files for a project. """

    for module in project.modules:
        # See if the module should be ignored.
        if module.name in ignored_modules:
            if verbose:
                print(f"Ignoring {module.name}")

            continue

        # Create the module-specific output directory.
        if module.outputdirsuffix != '':
            module_output_dir = os.path.join(output_dir, module.outputdirsuffix)
        else:
            module_output_dir = output_dir

        # Make sure the output directory exists.
        try:
            os.makedirs(module_output_dir)
        except:
            pass

        # Generate .sip files for the module contents.
        sip_file_names = []

        for sip_file in module.content:
            (file_name, _) = os.path.splitext(os.path.basename(sip_file.name))
            file_name += '.sip'
            sip_file_names.append(file_name)

            output = _create_sip_file(project, module, module_output_dir,
                    file_name, verbose)

            adapt(sip_file).generate_sip(output)

            output.close()

        # Generate the .sip file defining the module itself.
        output = _create_sip_file(project, module, module_output_dir,
                module.name + 'mod.sip', verbose)

        root_name = project.rootmodule

        if root_name != '':
            root_name += "."

        output.write('%Module(name=' + root_name + module.name)

        if module.callsuperinit != 'undefined':
            output.write(', call_super_init=' + ('True' if module.callsuperinit == 'yes' else 'False'))

        if module.virtualerrorhandler != '':
            output.write(', default_VirtualErrorHandler=' + module.virtualerrorhandler)

        # TODO: This should be a module property.
        output.write(', keyword_arguments="Optional"')

        if module.uselimitedapi:
            output.write(', use_limited_api=True')

        if module.pyssizetclean:
            output.write(', py_ssize_t_clean=True')

        output.write(')\n\n')

        top_level_module = True

        if len(module.imports) != 0:
            for imported in module.imports:
                # TODO: this assumes that the module's outputdirsuffix is the
                # same as the module name.
                output.write(f'%Import {imported}/{imported}mod.sip\n')

                if imported not in project.externalmodules:
                    top_level_module = False

            output.write('\n')

        if top_level_module:
            # Add any version, platform and feature information to all top
            # level modules (ie. those that don't import anything).

            if len(project.versions) != 0:
                versions = ' '.join(project.versions)
                output.write(f'%Timeline {{{versions}}}\n\n')

            if len(project.platforms) != 0:
                platforms = ' '.join(project.platforms)
                output.write(f'%Platforms {{{platforms}}}\n\n')

            if len(project.features) != 0:
                for feature in project.features:
                    output.write(f'%Feature {feature}\n')

                output.write('\n')

        if module.directives != '':
            output.write(module.directives)
            output.write('\n\n')

        for file_name in sip_file_names:
            output.write(f'%Include {file_name}\n')

        output.close()


def _create_sip_file(project, module, module_output_dir, file_name, verbose):
    """ Create and return a boilerplate .sip file. """

    if verbose:
        print(f"Generating '{file_name}'")

    output = IndentFile.create(os.path.join(module_output_dir, file_name))

    # Add the standard header.
    output.write(
f'''// {file_name} generated by MetaSIP
//
// This file is part of the {module.name} Python extension module.
''')

    if project.sipcomments:
        output.write(f'//\n{project.sipcomments}\n')

    output.write('\n')
    output.blank()

    return output
